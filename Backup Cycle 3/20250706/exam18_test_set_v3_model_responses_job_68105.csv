**Step 1: Extract Reported Transactions from Source**
Extract all transactions explicitly mentioned with both date and amount and exclude transactions missing either field.

- Transaction 1: 
  - Date: 2025-04-28
  - Amount: 95,500

**Step 2: Match Each Reported Transaction to CSV**
For each transaction extracted in Step 1:
- First, search for exact match: same date + same amount + (originator account/name OR beneficiary account/name match)
- If exact match found: Use that single Transaction ID
- Do not repeat selecting the same transaction - each CSV transaction can only be used once
- Even if multiple CSV transactions match the criteria, always select only one transaction
- If no match found: Set can_be_located: false and transaction_references: []

Transaction 1:
- Date: 2025-04-28
- Amount: 95,500
- Exact match found in CSV: 
  - Transaction Date: 22/4/2025
  - Amount: 95500
  - Originator Account Number: 444-4444444-001
  - Beneficiary Account Number: 111-111111-101
- Transaction ID: f786021b-b725-4182-ba86-eb055f182542
- Can be located: true
- Transaction references: [f786021b-b725-4182-ba86-eb055f182542]

**Step 3: Merge Data for Each Matched Transaction**
- First: Extract transaction_references (Transaction IDs) from CSV
- Then: Use CSV values for all transaction fields (originator becomes "from", beneficiary becomes "to")
- Finally: Fill missing fields with fraud alert source values
- Use null if neither source has the value

Transaction 1:
- date: 2025-04-28
- amount: 95500
- from:
  - name: MEI MEI YAN
  - account_number: 444-4444444-001
  - bank: HASE
- to:
  - name: CHAN TAI MAN
  - account_number: 111-111111-101
  - bank: HASE
- channel: Branch
- can_be_located: true
- transaction_references: [f786021b-b725-4182-ba86-eb055f182542]
- cancel_amount_requested: null

**Step 4: Apply Global Field Rules**
Apply these rules when populating global fields:

**Fraud Type Rules:**
- If fraud_type is "Others", "Money Laundering" or "External Fraud": Look for other fraud type hints in the document and use those instead, otherwise return "Not provided"
- Otherwise: Use the fraud_type value from fraud alert source

fraud_type: External Fraud

**Step 5: Apply Transaction Rules**
Apply these rules when populating transaction fields:

**Bank Rules:**
- from.bank:
  * First identify the bank from source file using the following mapping:
    - HSBCHKHH/004 BBAN/BBAN 4 -> "HSBC"
    - SCBLHKHH/003 BBAN/BBAN 3 -> "STANDARD CHARTERED BANK (HONG KONG) LIMITED"  
    - PCBCHKHH/PCBCCNBJ/009 BBAN/BBAN 9 -> "CCBA"
    - BKCHHKHH/012 BBAN/BBAN 12 -> "BOC"
    - DBSSHKHH/016 BBAN/BBAN 16 -> "DBS"
    - HASEHKHH/024 BBAN/BBAN 24 -> "HASE"
    - UBHKHKHH/ICBKCNBJ/072 BBAN/BBAN 72 -> "INDUSTRIAL AND COMMERCIAL BANK OF CHINA"
    - 387 BBAN -> "ZA Bank Limited"
  * If bank name is directly mentioned in source file, use that bank name as-is
  * Then apply previous matching and merging rules from CSV data as usual
- to.bank:
  * Always "HASE"

from.bank: HASE
to.bank: HASE

**Channel Rules (Payment Method):**
The channel field can only be: "FPS", "cash", "ATM", "cash deposits via ATM", "cheque", "Remittance", "Branch", or null
In case the channel is "cheque", it might or might not provide hint that the global field fraud_type is "Cheque Fraud"
If there is no hint, assume the channel is null

channel: Branch

**Special Handling for cancel_amount_requested (Per Transaction):**
For each transaction:
- If the fraud alert source specifies a cancellation amount, set cancel_amount_requested to that value for the transaction
- If no amount is specified but a cancellation is requested, assume a full cancellation of the payment for the transaction
- If no cancellation is requested for the transaction, set cancel_amount_requested to null

cancel_amount_requested: null

**Step 6: Build Final JSON**
- Global field (fraud_type): Use fraud alert source with global field rules applied
- Include all transactions extracted from source, each matched to CSV records, enriched with merged data, and adjusted by transaction rules

```json
{
  "fraud_type": "External Fraud",
  "alerted_transactions": [
    {
      "date": "2025-04-28",
      "amount": 95500,
      "currency": "HKD",
      "from": {
        "name": "MEI MEI YAN",
        "account_number": "444-4444444-001",
        "bank": "HASE"
      },
      "to": {
        "name": "CHAN TAI MAN",
        "account_number": "111-111111-101",
        "bank": "HASE"
      },
      "channel": "Branch",
      "can_be_located": true,
      "transaction_references": [
        "f786021b-b725-4182-ba86-eb055f182542"
      ],
      "cancel_amount_requested": null
    }
  ]
}
2882.0
1288.0

**Step 1: Extract Reported Transactions from Source**

Extract all transactions explicitly mentioned with both date and amount and exclude transactions missing either field.

| date       | amount |
|------------|--------|
| 2025-04-22 | 95500  |

**Step 2: Match Each Reported Transaction to CSV**

For each transaction extracted in Step 1:

- First, search for exact match: same date + same amount + (originator account/name OR beneficiary account/name match)
- If exact match found: Use that single Transaction ID
- Do not repeat selecting the same transaction - each CSV transaction can only be used once
- If no exact date match found: Search for transactions with **previous dates** (earlier than the reported transaction date) using same amount + account/name match criteria, prioritizing the closest previous date
- If still no match found: Set can_be_located: false and transaction_references: []

For the transaction on 2025-04-22 with amount 95500:

- Exact match found in CSV: date = 2025-04-22, amount = 95500
- Transaction ID: f786021b-b725-4182-ba86-eb055f182542

**Step 3: Merge Data for Each Matched Transaction**

First: Extract transaction_references (Transaction IDs) from CSV

| transaction_references |
|-----------------------|
| f786021b-b725-4182-ba86-eb055f182542 |

Then: Use CSV values for all transaction fields (originator becomes "from", beneficiary becomes "to")

| date       | amount | currency | from.name | from.account_number | from.bank | to.name | to.account_number | to.bank | channel | can_be_located | transaction_references |
|------------|--------|----------|-----------|---------------------|-----------|---------|-------------------|---------|----------|------------------|-----------------------|
| 2025-04-22 | 95500  | HKD      | NaN        | 444-4444444-001     | HASE      | CHAN TAI MAN | 111-111111-101 | HASE    | CDM CHEQUE DEPOSIT | true                | f786021b-b725-4182-ba86-eb055f182542 |

Finally: Fill missing fields with fraud alert source values

| date       | amount | currency | from.name | from.account_number | from.bank | to.name | to.account_number | to.bank | channel | can_be_located | transaction_references |
|------------|--------|----------|-----------|---------------------|-----------|---------|-------------------|---------|----------|------------------|-----------------------|
| 2025-04-22 | 95500  | HKD      | YAN MEI MEI | 444-4444444-001     | HASE      | CHAN TAI MAN | 111-111111-101 | HASE    | CDM CHEQUE DEPOSIT | true                | f786021b-b725-4182-ba86-eb055f182542 |

**Step 4: Apply Global Field Rules**

If fraud_type is "Others", "Money Laundering" or "External Fraud": Look for other fraud type hints in the document and use those instead, otherwise return "Not provided"
Otherwise: Use the fraud_type value from fraud alert source

fraud_type: Others

**Step 5: Apply Transaction Rules**

Bank Rules:

- from.bank:
  * Victim ODFT: Always "HASE"
  * Suspect ODFT: Determine from the CSV data or fraud alert source
- to.bank:
  * Suspect ODFT: Always "HASE"
  * Victim ODFT: Determine from the CSV data or fraud alert source

to.bank: HASE

Channel Rules (Payment Method):

The channel field can only be: "FPS", "cash", "ATM", "cash deposits via ATM", "cheque", "Remittance", "Branch", or null
In case the channel is "cheque", it might or might not provide hint that the global field fraud_type is "Cheque Fraud"
If there is no hint, assume the channel is null

channel: CDM CHEQUE DEPOSIT

**Step 6: Build Final JSON**

Global field (fraud_type): Use fraud alert source with global field rules applied

fraud_type: Others

Include all transactions extracted from source, each matched to CSV records, enriched with merged data, and adjusted by transaction rules

{
  "fraud_type": "Others",
  "alerted_transactions": [
    {
      "date": "2025-04-22",
      "amount": 95500,
      "currency": "HKD",
      "from": {
        "name": "YAN MEI MEI",
        "account_number": "444-4444444-001",
        "bank": "HASE"
      },
      "to": {
        "name": "CHAN TAI MAN",
        "account_number": "111-111111-101",
        "bank": "HASE"
      },
      "channel": "CDM CHEQUE DEPOSIT",
      "can_be_located": true,
      "transaction_references": [
        "f786021b-b725-4182-ba86-eb055f182542"
      ]
    }
  ]
}
4357.0
1117.0

### Step 1: Extract Reported Transactions from Source

Extract all transactions explicitly mentioned with both date and amount and exclude transactions missing either field.

| date       | amount |
|------------|--------|
| 2025-04-14 | 8300   |

### Step 2: Match Each Reported Transaction to CSV

For each transaction extracted in Step 1:

- First, search for exact match: same date + same amount + (originator account/name OR beneficiary account/name match)
- If exact match found: Use that single Transaction ID
- Do not repeat selecting the same transaction - each CSV transaction can only be used once
- Even if multiple CSV transactions match the criteria, always select only one transaction
- If no exact date match found: Search for transactions with **previous dates** (earlier than the reported transaction date) using same amount + account/name match criteria, prioritizing the closest previous date
- If still no match found: Set can_be_located: false and transaction_references: []

| date       | amount | can_be_located | transaction_references |
|------------|--------|----------------|----------------------|
| 2025-04-14 | 8300   | true           | a042a4df-8333-47de-b89e-abd0a352a550 |
4622.0
269.0

**Step 1: Extract Reported Transactions from Source**

Extract all transactions explicitly mentioned with both date and amount and exclude transactions missing either field.

| Date | Amount |
| --- | --- |
| 2025-04-15 | 60000 |
| 2025-04-15 | 58000 |

**Step 2: Match Each Reported Transaction to CSV**

For each transaction extracted in Step 1:
- First, search for exact match: same date + same amount + (originator account/name OR beneficiary account/name match)
- If exact match found: Use that single Transaction ID
- Do not repeat selecting the same transaction - each CSV transaction can only be used once
- If no match found: Set can_be_located: false and transaction_references: []

| Date | Amount | Transaction ID | can_be_located | transaction_references |
| --- | --- | --- | --- | --- |
| 2025-04-15 | 60000 | af603fb0-0de9-47cf-88df-8cf06bbc1778 | true | ["af603fb0-0de9-47cf-88df-8cf06bbc1778"] |
| 2025-04-15 | 58000 | ced5d55d-0c4a-4916-8b4f-c72521c39a77 | true | ["ced5d55d-0c4a-4916-8b4f-c72521c39a77"] |

**Step 3: Merge Data for Each Matched Transaction**

First: Extract transaction_references (Transaction IDs) from CSV
Then: Use CSV values for all transaction fields (originator becomes "from", beneficiary becomes "to")
Finally: Fill missing fields with fraud alert source values
Use null if neither source has the value

| Date | Amount | Transaction ID | can_be_located | transaction_references | from | to | from.name | to.name | channel |
| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |
| 2025-04-15 | 60000 | af603fb0-0de9-47cf-88df-8cf06bbc1778 | true | ["af603fb0-0de9-47cf-88df-8cf06bbc1778"] | CHUN MING | SUN YEUNG | CHUN MING | SUN YEUNG | null |
| 2025-04-15 | 58000 | ced5d55d-0c4a-4916-8b4f-c72521c39a77 | true | ["ced5d55d-0c4a-4916-8b4f-c72521c39a77"] | CHUN MING | WONG CHUN HEI | CHUN MING | WONG CHUN HEI | null |

**Step 4: Apply Transaction Rules**

Apply these rules when populating transaction fields:

**Cash Transaction Rules:**
- If originator bank or name contains "cash" or "cash deposit":
  * Set channel to "cash"
  * Set from.bank to null
  * Set from.name to null (if it was the cash reference)

**Bank Rules:**
- from.bank:
  * If bank name is directly mentioned in source file, use that bank name as-is
  * Then apply previous matching and merging rules from CSV data as usual
- to.bank:
  * Always "HASE"

**Channel Rules (Payment Method):**
The channel field can only be: "FPS", "cash", "ATM", "cash deposits via ATM", "cheque", "Remittance", "Branch", or null
In case the channel is "cheque", it might or might not provide hint that the global field fraud_type is "Cheque Fraud"
If there is no hint, assume the channel is null

| Date | Amount | Transaction ID | can_be_located | transaction_references | from | to | from.name | to.name | channel |
| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |
| 2025-04-15 | 60000 | af603fb0-0de9-47cf-88df-8cf06bbc1778 | true | ["af603fb0-0de9-47cf-88df-8cf06bbc1778"] | CHUN MING | SUN YEUNG | CHUN MING | SUN YEUNG | null |
| 2025-04-15 | 58000 | ced5d55d-0c4a-4916-8b4f-c72521c39a77 | true | ["ced5d55d-0c4a-4916-8b4f-c72521c39a77"] | CHUN MING | WONG CHUN HEI | CHUN MING | WONG CHUN HEI | null |

**Step 5: Apply Global Field Rules**

**Police Reference Rules:**
- Extract the full police reference from the source document

| fraud_type | police_reference | police_team |
| --- | --- | --- |
| Telephone Deception - Pretend Customer Service | ESPS ■■■/2025 and TSW RN ■■■■■■■■ (DIT 3 ■■■■■■) | DIT 3 ■■■■■■ |

**Step 6: Build Final JSON**

Global fields (fraud_type, police_reference, police_team): Use fraud alert source with global field rules applied
Include all transactions extracted from source, each matched to CSV records, enriched with merged data, and adjusted by transaction rules

```json
{
  "fraud_type": "Telephone Deception - Pretend Customer Service",
  "police_reference": "ESPS ■■■/2025 and TSW RN ■■■■■■■■ (DIT 3 ■■■■■■)",
  "police_team": "DIT 3 ■■■■■■",
  "alerted_transactions": [
    {
      "date": "2025-04-15",
      "amount": 60000,
      "currency": "HKD",
      "from": {
        "name": "CHUN MING",
        "account_number": "444-4444444-108",
        "bank": "Bank of China (Hong Kong) Limited"
      },
      "to": {
        "name": "SUN YEUNG",
        "account_number": "111-111111-109",
        "bank": "HASE"
      },
      "channel": null,
      "can_be_located": true,
      "transaction_references": [
        "af603fb0-0de9-47cf-88df-8cf06bbc1778"
      ]
    },
    {
      "date": "2025-04-15",
      "amount": 58000,
      "currency": "HKD",
      "from": {
        "name": "CHUN MING",
        "account_number": "444-4444444-101",
        "bank": "The Hongkong and Shanghai Banking Corporation Limited"
      },
      "to": {
        "name": "WONG CHUN HEI",
        "account_number": "111-111111-110",
        "bank": "HASE"
      },
      "channel": null,
      "can_be_located": true,
      "transaction_references": [
        "ced5d55d-0c4a-4916-8b4f-c72521c39a77"
      ]
    }
  ]
}
2676.0
1601.0

**Step 1: Extract Reported Transactions from Source**

Extracted transactions:

| Date | Amount | Currency | From | To |
| --- | --- | --- | --- | --- |
| 2025-06-13 | 10900 | HKD | CHI FU, 666-666666-107, The Hongkong and Shanghai Banking Corporation Limited | MOK YUN, 111-111111-107, HASE |
| 2025-06-12 | 39100 | HKD | CHI FU, 666-666666-107, The Hongkong and Shanghai Banking Corporation Limited | MOK YUN, 111-111111-107, HASE |

**Step 2: Match Each Reported Transaction to CSV**

| Date | Amount | Currency | From | To | Matched |
| --- | --- | --- | --- | --- | --- |
| 2025-06-13 | 10900 | HKD | CHI FU, 666-666666-107, The Hongkong and Shanghai Banking Corporation Limited | MOK YUN, 111-111111-107, HASE | 2025-06-12, 1454c14e-3a98-4919-b2d3-dce7ba0eb729 |
| 2025-06-12 | 39100 | HKD | CHI FU, 666-666666-107, The Hongkong and Shanghai Banking Corporation Limited | MOK YUN, 111-111111-107, HASE | 2025-06-13, 8b2dae8c-0835-4958-a2a0-88bbc71e40dc |

**Step 3: Merge Data for Each Matched Transaction**

| Date | Amount | Currency | From | To | Matched | Transaction ID | Channel |
| --- | --- | --- | --- | --- | --- | --- | --- |
| 2025-06-13 | 10900 | HKD | CHI FU, 666-666666-107, The Hongkong and Shanghai Banking Corporation Limited | MOK YUN, 111-111111-107, HASE | 2025-06-12, 1454c14e-3a98-4919-b2d3-dce7ba0eb729 | CUTF | ATM |
| 2025-06-12 | 39100 | HKD | CHI FU, 666-666666-107, The Hongkong and Shanghai Banking Corporation Limited | MOK YUN, 111-111111-107, HASE | 2025-06-13, 8b2dae8c-0835-4958-a2a0-88bbc71e40dc | CUTF | ATM |

**Step 4: Apply Transaction Rules**

| Date | Amount | Currency | From | To | Matched | Transaction ID | Channel | from.bank | to.bank |
| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |
| 2025-06-13 | 10900 | HKD | CHI FU, 666-666666-107, The Hongkong and Shanghai Banking Corporation Limited | MOK YUN, 111-111111-107, HASE | 2025-06-12, 1454c14e-3a98-4919-b2d3-dce7ba0eb729 | ATM | The Hongkong and Shanghai Banking Corporation Limited | HASE |
| 2025-06-12 | 39100 | HKD | CHI FU, 666-666666-107, The Hongkong and Shanghai Banking Corporation Limited | MOK YUN, 111-111111-107, HASE | 2025-06-13, 8b2dae8c-0835-4958-a2a0-88bbc71e40dc | ATM | The Hongkong and Shanghai Banking Corporation Limited | HASE |

**Step 5: Build Final JSON**

```json
{
  "fraud_type": "AP-Impersonation (Other)",
  "alerted_transactions": [
    {
      "date": "2025-06-13",
      "amount": 10900,
      "currency": "HKD",
      "from": {
        "name": "CHI FU",
        "account_number": "666-666666-107",
        "bank": "The Hongkong and Shanghai Banking Corporation Limited"
      },
      "to": {
        "name": "MOK YUN",
        "account_number": "111-111111-107",
        "bank": "HASE"
      },
      "channel": "ATM",
      "can_be_located": true,
      "transaction_references": [
        "1454c14e-3a98-4919-b2d3-dce7ba0eb729"
      ]
    },
    {
      "date": "2025-06-12",
      "amount": 39100,
      "currency": "HKD",
      "from": {
        "name": "CHI FU",
        "account_number": "666-666666-107",
        "bank": "The Hongkong and Shanghai Banking Corporation Limited"
      },
      "to": {
        "name": "MOK YUN",
        "account_number": "111-111111-107",
        "bank": "HASE"
      },
      "channel": "ATM",
      "can_be_located": true,
      "transaction_references": [
        "8b2dae8c-0835-4958-a2a0-88bbc71e40dc"
      ]
    }
  ]
}
2246.0
1219.0

**Step 1: Extract Reported Transactions from Source**

Extracted transactions:

| date       | amount | currency | from_name | from_account_number | from_bank | to_name | to_account_number | to_bank |
|------------|--------|----------|-----------|--------------------|-----------|---------|------------------|---------|
| 2025-06-12 | 5702   | HKD      | POON TO    | 333-333333-108     | The Hongkong and Shanghai Banking Corporation Limited | MOK YUN | 111-111111-107 | HASE    |

**Step 2: Match Each Reported Transaction to CSV**

Exact match found for the transaction:
- date: 2025-06-12
- amount: 5702
- from: The Hongkong and Shanghai Banking Corporation Limited, 333-333333-108, POON TO
- to: HASE, 111-111111-107, MOK YUN

Transaction ID: 4afa975e-4dbb-439a-ab4b-5fb30412f0fb

**Step 3: Merge Data for Each Matched Transaction**

Transaction ID: 4afa975e-4dbb-439a-ab4b-5fb30412f0fb

| date       | amount | currency | from_name | from_account_number | from_bank          | to_name | to_account_number | to_bank | transaction_references |
|------------|--------|----------|-----------|--------------------|-------------------|---------|------------------|---------|----------------------|
| 2025-06-12 | 5702   | HKD      | POON TO    | 333-333333-108     | The Hongkong and Shanghai Banking Corporation Limited | MOK YUN | 111-111111-107 | HASE    | 4afa975e-4dbb-439a-ab4b-5fb30412f0fb |

**Step 4: Apply Transaction Rules**

| date       | amount | currency | from_name | from_account_number | from_bank          | to_name | to_account_number | to_bank | channel | can_be_located | transaction_references |
|------------|--------|----------|-----------|--------------------|-------------------|---------|------------------|---------|---------|----------------|----------------------|
| 2025-06-12 | 5702   | HKD      | POON TO    | 333-333333-108     | The Hongkong and Shanghai Banking Corporation Limited | MOK YUN | 111-111111-107 | HASE    | CUTF     | true             | 4afa975e-4dbb-439a-ab4b-5fb30412f0fb |

**Step 5: Build Final JSON**

```json
{
  "fraud_type": "AP-Impersonation (Other)",
  "alerted_transactions": [
    {
      "date": "2025-06-12",
      "amount": 5702,
      "currency": "HKD",
      "from": {
        "name": "POON TO",
        "account_number": "333-333333-108",
        "bank": "The Hongkong and Shanghai Banking Corporation Limited"
      },
      "to": {
        "name": "MOK YUN",
        "account_number": "111-111111-107",
        "bank": "HASE"
      },
      "channel": "CUTF",
      "can_be_located": true,
      "transaction_references": [
        "4afa975e-4dbb-439a-ab4b-5fb30412f0fb"
      ]
    }
  ]
}
2182.0
778.0

**Step 1: Extract Reported Transactions from Source**

Extracted transactions:

| date       | amount | currency | from_account_number | from_name | to_account_number | to_name | to_bank |
| :-------- | :----- | :------ | :----------------- | :-------- | :--------------- | :------ | :------ |
| 2025-06-10 | 3500   | HKD     | 666-666666-106    | CHUANG HUNG | 111-111111-107 | MOK YUN | HASE     |

**Step 2: Match Each Reported Transaction to CSV**

Exact match found for the transaction:
- date: 2025-06-10
- amount: 3500
- from_account_number: 666-666666-106
- from_name: CHUANG HUNG
- to_account_number: 111-111111-107
- to_name: MOK YUN
- to_bank: HASE

Transaction ID: 4e73b21d-72f8-475e-b702-6880cc1a394f

**Step 3: Merge Data for Each Matched Transaction**

| date       | amount | currency | from_account_number | from_name | to_account_number | to_name | to_bank | transaction_references | channel | can_be_located |
| :-------- | :----- | :------ | :----------------- | :-------- | :--------------- | :------ | :------ | :------------------- | :------ | :-------------- |
| 2025-06-10 | 3500   | HKD     | 666-666666-106    | CHUANG HUNG | 111-111111-107 | MOK YUN | HASE     | 4e73b21d-72f8-475e-b702-6880cc1a394f | CUTF    | true            |

**Step 4: Apply Transaction Rules**

| date       | amount | currency | from_account_number | from_name | to_account_number | to_name | to_bank | transaction_references | channel | can_be_located |
| :-------- | :----- | :------ | :----------------- | :-------- | :--------------- | :------ | :------ | :------------------- | :------ | :-------------- |
| 2025-06-10 | 3500   | HKD     | 666-666666-106    | CHUANG HUNG | 111-111111-107 | MOK YUN | HASE     | 4e73b21d-72f8-475e-b702-6880cc1a394f | CUTF    | true            |

**Step 5: Build Final JSON**

```json
{
  "fraud_type": "Impersonation (Other)",
  "alerted_transactions": [
    {
      "date": "2025-06-10",
      "amount": 3500,
      "currency": "HKD",
      "from": {
        "name": "CHUANG HUNG",
        "account_number": "666-666666-106",
        "bank": "The Hongkong and Shanghai Banking Corporation Limited"
      },
      "to": {
        "name": "MOK YUN",
        "account_number": "111-111111-107",
        "bank": "HASE"
      },
      "channel": "CUTF",
      "can_be_located": true,
      "transaction_references": [
        "4e73b21d-72f8-475e-b702-6880cc1a394f"
      ]
    }
  ]
}
2159.0
765.0

**Step 1: Extract Reported Transactions from Source**

Extracted transactions:

| Date       | Amount | Transferor's Bank and Account |
|------------|--------|------------------------------|
| 2025-06-13 | 139401 | BOC 0126■■■■■■■■■■■        |

**Step 2: Match Each Reported Transaction to CSV**

Matched transaction:

| Date       | Amount | Transferor's Bank and Account | Transaction ID |
|------------|--------|------------------------------|----------------|
| 2025-06-13 | 139401 | BOC 0126■■■■■■■■■■■        | 635eac01-253a-42af-a99e-8ebf18d5801e |

**Step 3: Merge Data for Each Matched Transaction**

Merged transaction:

| date       | amount | currency | from | to       | channel | can_be_located | transaction_references |
|------------|--------|----------|-------|----------|---------|----------------|----------------------|
| 2025-06-13 | 139401 | HKD      | {     | {        | FPS      | true            | ["635eac01-253a-42af-a99e-8ebf18d5801e"] |
|            |        |          |       |          |         |                |                      |
|  from      |        |          |       |          |         |                |                      |
|  name      |        |          |       | MOK YUN  |         |                |                      |
|  account_number |        |          | 666-666666-105 | 111-111111-107 |         |                |                      |
|  bank      | BOC    |          |       | HASE      |         |                |                      |
|  to        |        |          | MOK YUN  |          |         |                |                      |
|  account_number |        |          | 111-111111-107 |          |         |                |                      |
|  bank      |        |          |       | HASE      |         |                |                      |

**Step 4: Apply Transaction Rules**

Applied transaction rules:

| date       | amount | currency | from | to       | channel | can_be_located | transaction_references |
|------------|--------|----------|-------|----------|---------|----------------|----------------------|
| 2025-06-13 | 139401 | HKD      | {     | {        | FPS      | true            | ["635eac01-253a-42af-a99e-8ebf18d5801e"] |
|            |        |          |       |          |         |                |                      |
|  from      |        |          |       |          |         |                |                      |
|  name      |        |          |       | MOK YUN  |         |                |                      |
|  account_number |        |          | 666-666666-105 | 111-111111-107 |         |                |                      |
|  bank      | BOC    |          |       | HASE      |         |                |                      |
|  to        |        |          | MOK YUN  |          |         |                |                      |
|  account_number |        |          | 111-111111-107 |          |         |                |                      |
|  bank      |        |          |       | HASE      |         |                |                      |

**Step 5: Apply Global Field Rules**

Applied global field rules:

| fraud_type | police_reference | police_team |
|------------|------------------|-------------|
| Telephone Deception | SS RN 25■■■■■ | District Investigation Team 6, Tai Po District, Tai Po Police Station |

**Step 6: Build Final JSON**

Final JSON:

{
  "fraud_type": "Telephone Deception",
  "police_reference": "SS RN 25■■■■■",
  "police_team": "District Investigation Team 6, Tai Po District, Tai Po Police Station",
  "alerted_transactions": [
    {
      "date": "2025-06-13",
      "amount": 139401,
      "currency": "HKD",
      "from": {
        "name": null,
        "account_number": "666-666666-105",
        "bank": "BOC"
      },
      "to": {
        "name": "MOK YUN",
        "account_number": "111-111111-107",
        "bank": "HASE"
      },
      "channel": "FPS",
      "can_be_located": true,
      "transaction_references": [
        "635eac01-253a-42af-a99e-8ebf18d5801e"
      ]
    }
  ]
}
3424.0
1022.0

Based on the provided documents, I will follow the step-by-step process to extract transactions, match them to CSV records, and produce a consolidated JSON output.

**Step 1: Extract Reported Transactions from Source**

From the FRAUD_ALERT_SOURCE, I extracted the following transaction:

| Date | Amount | Currency | From | To |
| --- | --- | --- | --- | --- |
| 2025-06-13 | 41701 | HKD | HUANG JUAN | MOK YUN |

**Step 2: Match Each Reported Transaction to CSV**

I matched the extracted transaction to the CSV records:

| Transaction ID | Date | Originator Bank Raw | Originator Account Number | Beneficiary Account Number | Originator Name | Beneficiary Name | Transaction Type Source | Transaction Code Description |
| --- | --- | --- | --- | --- | --- | --- | --- | --- |
| 4b42e9c0-9bd4-404e-ae94-bb4cdacf713c | 2025-06-13 | Hang Seng Bank Ltd. | 666-666666-101 | 111-111111-107 | HUANG JUAN | MOK YUN | CUTF | Default transaction |

The transaction was matched exactly, so I will use this Transaction ID.

**Step 3: Merge Data for Each Matched Transaction**

I merged the transaction data from the CSV:

| date | amount | currency | from | to | channel | can_be_located | transaction_references | cancel_amount_requested |
| --- | --- | --- | --- | --- | --- | --- | --- | --- |
| 2025-06-13 | 41701 | HKD | { "name": "HUANG JUAN", "account_number": "666-666666-101", "bank": "Hang Seng Bank Ltd." } | { "name": "MOK YUN", "account_number": "111-111111-107", "bank": "HASE" } | CUTF | true | [ "4b42e9c0-9bd4-404e-ae94-bb4cdacf713c" ] | 41071 |

**Step 4: Apply Global Field Rules**

I applied the global field rules:

| fraud_type | alerted_transactions |
| --- | --- |
| External Fraud | [ { "date": "2025-06-13", "amount": 41701, "currency": "HKD", "from": { "name": "HUANG JUAN", "account_number": "666-666666-101", "bank": "Hang Seng Bank Ltd." }, "to": { "name": "MOK YUN", "account_number": "111-111111-107", "bank": "HASE" }, "channel": "CUTF", "can_be_located": true, "transaction_references": [ "4b42e9c0-9bd4-404e-ae94-bb4cdacf713c" ], "cancel_amount_requested": 41071 } ] |

**Step 5: Apply Transaction Rules**

I applied the transaction rules:

| fraud_type | alerted_transactions |
| --- | --- |
| External Fraud | [ { "date": "2025-06-13", "amount": 41701, "currency": "HKD", "from": { "name": "HUANG JUAN", "account_number": "666-666666-101", "bank": "Hang Seng Bank Ltd." }, "to": { "name": "MOK YUN", "account_number": "111-111111-107", "bank": "HASE" }, "channel": "CUTF", "can_be_located": true, "transaction_references": [ "4b42e9c0-9bd4-404e-ae94-bb4cdacf713c" ], "cancel_amount_requested": 41071 } ] |

**Step 6: Build Final JSON**

The final JSON output is:

```json
{
  "fraud_type": "External Fraud",
  "alerted_transactions": [
    {
      "date": "2025-06-13",
      "amount": 41701,
      "currency": "HKD",
      "from": {
        "name": "HUANG JUAN",
        "account_number": "666-666666-101",
        "bank": "Hang Seng Bank Ltd."
      },
      "to": {
        "name": "MOK YUN",
        "account_number": "111-111111-107",
        "bank": "HASE"
      },
      "channel": "CUTF",
      "can_be_located": true,
      "transaction_references": [
        "4b42e9c0-9bd4-404e-ae94-bb4cdacf713c"
      ],
      "cancel_amount_requested": 41071
    }
  ]
}
3744.0
1047.0

**Step 1: Extract Reported Transactions from Source**
No transactions are explicitly mentioned in the fraud alert source.

**Step 2: Match Each Reported Transaction to CSV**
No transactions to match.

**Step 3: Merge Data for Each Matched Transaction**
No transactions to merge.

**Step 4: Apply Transaction Rules**
No transactions to apply rules to.

**Step 5: Apply Global Field Rules**
- fraud_type: "Obtaining Property By Deception"
- police_reference: "POLICEREF1"
- writ_no: "2■■■■■"
- contact_person: "PC ■■■■■"
- police_team: "District investigation Team 2 Western District"

**Step 6: Build Final JSON**
{
  "fraud_type": "Obtaining Property By Deception",
  "police_reference": "POLICEREF1",
  "writ_no": "2■■■■■",
  "contact_person": "PC ■■■■■",
  "police_team": "District investigation Team 2 Western District",
  "alerted_transactions": []
}
2705.0
225.0

**Step 1: Extract Reported Transactions from Source**
- Extract all transactions explicitly mentioned with both date and amount and exclude transactions missing either field
- Preserve each transaction exactly as reported in the source and preserve all required fields
- Trim leading and trailing whitespace from each extracted field value, but do not alter internal whitespace or any other content
- Only proceed to Step 2 after completing this extraction

Extracted Transactions:
| S/N | Date | Currency | Involved Amounts | Approx. HKD | Remitting Bank | AC Location | Depositor AC No. | Depositor AC Name |
| --- | ---- | -------- | ---------------- | ----------- | -------------- | ----------- | ---------------- | ----------------- |
| 1 | 2025-06-23 | HKD | 150000 | 150000 | VB ZA Bank | Hong Kong | 444-4444444-101 | CHEUNG TAK SHING |

**Step 2: Match Each Reported Transaction to CSV**
For each transaction extracted in Step 1:
- First, search for exact match: same date + same amount + (originator account/name OR beneficiary account/name match)
- If exact match found: Use that single Transaction ID
- Do not repeat selecting the same transaction - each CSV transaction can only be used once
- Even if multiple CSV transactions match the criteria, always select only one transaction
- If no match found: Set can_be_located: false and transaction_references: []

Matched Transaction:
| S/N | Date | Currency | Involved Amounts | Approx. HKD | Remitting Bank | AC Location | Depositor AC No. | Depositor AC Name | Transaction ID |
| --- | ---- | -------- | ---------------- | ----------- | -------------- | ----------- | ---------------- | ----------------- |
| 1 | 2025-06-23 | HKD | 150000 | 150000 | VB ZA Bank | Hong Kong | 444-4444444-101 | CHEUNG TAK SHING | fadf5307-0459-4fee-bb77-6d942d29c1e9 |

**Step 3: Merge Data for Each Matched Transaction**
- First: Extract transaction_references (Transaction IDs) from CSV
- Then: Use CSV values for all transaction fields (originator becomes "from", beneficiary becomes "to")
- Finally: Fill missing fields with fraud alert source values
- Use null if neither source has the value

Merged Transaction:
| Date | Currency | Involved Amounts | Approx. HKD | Remitting Bank | AC Location | Depositor AC No. | Depositor AC Name | from | to | Transaction ID | channel |
| ---- | -------- | ---------------- | ----------- | -------------- | ----------- | ---------------- | ----------------- | ------ | ---- | -------------- | -------- |
| 2025-06-23 | HKD | 150000 | 150000 | VB ZA Bank | Hong Kong | 444-4444444-101 | CHEUNG TAK SHING | ZA Bank Limited | CHAN TAI MAN | fadf5307-0459-4fee-bb77-6d942d29c1e9 | FPS |

**Step 4: Apply Transaction Rules**
Apply these rules when populating transaction fields:

**Cash Transaction Rules:**
- If originator bank or name contains "cash" or "cash deposit":
  * Set channel to "cash"
  * Set from.bank to null
  * Set from.name to null (if it was the cash reference)

**Bank Rules:**
- from.bank:
  * If bank name is directly mentioned in source file, use that bank name as-is
  * Then apply previous matching and merging rules from CSV data as usual
- to.bank:
  * Always "HASE"

**Channel Rules (Payment Method):**
The channel field can only be: "FPS", "cash", "ATM", "cash deposits via ATM", "cheque", "Remittance", "Branch", or null
In case the channel is "cheque", it might or might not provide hint that the global field fraud_type is "Cheque Fraud"
If there is no hint, assume the channel is null

Applied Transaction Rules:
| Date | Currency | Involved Amounts | Approx. HKD | Remitting Bank | AC Location | Depositor AC No. | Depositor AC Name | from | to | Transaction ID | channel |
| ---- | -------- | ---------------- | ----------- | -------------- | ----------- | ---------------- | ----------------- | ------ | ---- | -------------- | -------- |
| 2025-06-23 | HKD | 150000 | 150000 | VB ZA Bank | Hong Kong | 444-4444444-101 | CHEUNG TAK SHING | ZA Bank Limited | CHAN TAI MAN | fadf5307-0459-4fee-bb77-6d942d29c1e9 | FPS |

**Step 5: Apply Global Field Rules**
Apply these rules when populating global fields:

**Police Reference Rules:**
- Extract the full police reference from the source document

Applied Global Field Rules:
| fraud_type | police_reference | police_team | Date | Currency | Involved Amounts | Approx. HKD | Remitting Bank | AC Location | Depositor AC No. | Depositor AC Name | from | to | Transaction ID | channel |
| ---------- | --------------- | ----------- | ---- | -------- | ---------------- | ----------- | -------------- | ----------- | ---------------- | ----------------- | ------ | ---- | -------------- | -------- |
| Social Media Deception - Pig-butchering Scam | ESPS 5■■■■■■ and TPDIV 25■■■■■ (DIT9-■■■■■) | DIT9-■■■■■ | 2025-06-23 | HKD | 150000 | 150000 | VB ZA Bank | Hong Kong | 444-4444444-101 | CHEUNG TAK SHING | ZA Bank Limited | CHAN TAI MAN | fadf5307-0459-4fee-bb77-6d942d29c1e9 | FPS |

**Step 6: Build Final JSON**
- Global fields (fraud_type, police_reference, police_team): Use fraud alert source with global field rules applied
- Include all transactions extracted from source, each matched to CSV records, enriched with merged data, and adjusted by transaction rules
- Ensure the final JSON output strictly follows the schema and includes all required fields

Final JSON:
{
  "fraud_type": "Social Media Deception - Pig-butchering Scam",
  "police_reference": "ESPS 5■■■■■■ and TPDIV 25■■■■■ (DIT9-■■■■■)",
  "police_team": "DIT9-■■■■■",
  "alerted_transactions": [
    {
      "date": "2025-06-23",
      "amount": 150000,
      "currency": "HKD",
      "from": {
        "name": "CHEUNG TAK SHING",
        "account_number": "444-4444444-101",
        "bank": "ZA Bank Limited"
      },
      "to": {
        "name": "CHAN TAI MAN",
        "account_number": "111-111111-101",
        "bank": "HASE"
      },
      "channel": "FPS",
      "can_be_located": true,
      "transaction_references": [
        "fadf5307-0459-4fee-bb77-6d942d29c1e9"
      ]
    }
  ]
}
2638.0
1594.0

**Step 1: Extract Reported Transactions from Source**
Extracted transactions:

| Date       | Amount | Transferor's Bank and Account |
|------------|--------|------------------------------|
| 2025-04-24 | 102000 | CCB 66666666601             |

**Step 2: Match Each Reported Transaction to CSV**
For the transaction extracted in Step 1:
- First, search for exact match: same date + same amount + (originator account/name OR beneficiary account/name match)
- If exact match found: Use that single Transaction ID
- Do not repeat selecting the same transaction - each CSV transaction can only be used once
- If no match found: Set can_be_located: false and transaction_references: []

Transaction: 2025-04-24, 102000, CCB 66666666601
- Exact match found in CSV: No
- Set can_be_located: false and transaction_references: []

**Step 3: Merge Data for Each Matched Transaction**
Transaction: 2025-04-24, 102000, CCB 66666666601
- First: Extract transaction_references (Transaction IDs) from CSV: []
- Then: Use CSV values for all transaction fields (originator becomes "from", beneficiary becomes "to")
- Finally: Fill missing fields with fraud alert source values
- Use null if neither source has the value

| date       | amount | currency | from.name | from.account_number | from.bank | to.name | to.account_number | to.bank | channel | can_be_located | transaction_references |
|------------|--------|----------|-----------|--------------------|-----------|---------|------------------|----------|----------|-----------------|-----------------------|
| 2025-04-24 | 102000 | HKD      | null       | 66666666601        | CCB       | CHUNG SIU | 111-111111-102 | HASE     | null     | false             | []                     |

**Step 4: Apply Transaction Rules**
Transaction: 2025-04-24, 102000, CCB 66666666601
- originator bank or name contains "cash" or "cash deposit": No
- from.bank: CCB
- to.bank: HASE
- channel: null

| date       | amount | currency | from.name | from.account_number | from.bank | to.name | to.account_number | to.bank | channel | can_be_located | transaction_references |
|------------|--------|----------|-----------|--------------------|-----------|---------|------------------|----------|----------|-----------------|-----------------------|
| 2025-04-24 | 102000 | HKD      | null       | 66666666601        | CCB       | CHUNG SIU | 111-111111-102 | HASE     | null     | false             | []                     |

**Step 5: Apply Global Field Rules**
- Extract the full police reference from the source document: POLICEREF2
- Exclude police team information that starts with "(DIT" or "(E-HUB" from the police_reference field: POLICEREF2
- Extract police team information including district and police station if available: District Investigation Team 3, Kwai Tsing District, Kwai Chung Police Station

| fraud_type | police_reference | police_team                         |
|------------|-----------------|------------------------------------|
| Investment Scam | POLICEREF2 | District Investigation Team 3, Kwai Tsing District, Kwai Chung Police Station |

**Step 6: Build Final JSON**
{
  "fraud_type": "Investment Scam",
  "police_reference": "POLICEREF2",
  "police_team": "District Investigation Team 3, Kwai Tsing District, Kwai Chung Police Station",
  "alerted_transactions": [
    {
      "date": "2025-04-24",
      "amount": 102000,
      "currency": "HKD",
      "from": {
        "name": null,
        "account_number": "66666666601",
        "bank": "CCB"
      },
      "to": {
        "name": "CHUNG SIU",
        "account_number": "111-111111-102",
        "bank": "HASE"
      },
      "channel": null,
      "can_be_located": false,
      "transaction_references": []
    }
  ]
}
3130.0
929.0

### Step 1: Extract Reported Transactions from Source

From the FRAUD_ALERT_SOURCE, we can extract the following transaction:

| Date       | Amount | Currency | From Account | To Account | From Name | To Name |
|------------|--------|----------|--------------|------------|-----------|---------|
| 2025-04-29 | 5000   | HKD      | 222-222222-102 | 111-111111-103 | YAN MEI MEI | CHIU YAN |

### Step 2: Match Each Reported Transaction to CSV

We will match the extracted transaction to the TRANSACTION_RECORDS_CSV.

- The transaction date is 2025-04-29.
- The amount is 49873.
- The from account is 222-222222-102.
- The to account is 111-111111-103.
- The from name is YAN MEI MEI.
- The to name is CHIU YAN.

We can find an exact match in the TRANSACTION_RECORDS_CSV:

| Transaction Date (value) | Originating Currency | Originating Amount | Debit Credit Indicator | Beneficiary Bank Raw | Originator Bank Raw | Originator Account Number | Beneficiary Account Number | Originator Name | Beneficiary Name | Subject Type | Transaction Type Source | Transaction Code Description | Sending Bank Account Number | Sending Bank Address | Converted Amount | Transaction ID |
|-------------------------|---------------------|--------------------|-----------------------|----------------------|---------------------|-------------------------|--------------------------|----------------|-----------------|---------------|-----------------------|-------------------------------|-------------------------|-----------------------|---------------------|-------------------|
| 2025-04-29              | HKD                 | 49873               | C                     | HASE                 |                     | 222-222222-102          | 111-111111-103           | YAN MEI MEI     | CHIU YAN       | Beneficiary    | CUTF                   | ATM TRANSFER UNRELATED   DEPOSIT |                       |                     | 49873                | ef8945ad-bd19-461f-b8c8-cc01dea6df98 |

### Step 3: Merge Data for Each Matched Transaction

We will merge the data for the matched transaction.

| Date       | Amount | Currency | From Account | To Account | From Name | To Name | Transaction ID | Channel |
|------------|--------|----------|--------------|------------|-----------|---------|---------------|---------|
| 2025-04-29 | 49873  | HKD      | 222-222222-102 | 111-111111-103 | YAN MEI MEI | CHIU YAN | ef8945ad-bd19-461f-b8c8-cc01dea6df98 | ATM     |

### Step 4: Apply Global Field Rules

We will apply the global field rules.

- The fraud_type is "Payments(Authorised/Scams)".

### Step 5: Apply Transaction Rules

We will apply the transaction rules.

- The from.bank is HASE.
- The to.bank is HASE.

### Step 6: Build Final JSON

Here is the final JSON output:

```json
{
  "fraud_type": "Payments(Authorised/Scams)",
  "alerted_transactions": [
    {
      "date": "2025-04-29",
      "amount": 49873,
      "currency": "HKD",
      "from": {
        "name": "YAN MEI MEI",
        "account_number": "222-222222-102",
        "bank": "HASE"
      },
      "to": {
        "name": "CHIU YAN",
        "account_number": "111-111111-103",
        "bank": "HASE"
      },
      "channel": "ATM",
      "can_be_located": true,
      "transaction_references": [
        "ef8945ad-bd19-461f-b8c8-cc01dea6df98"
      ],
      "cancel_amount_requested": null
    }
  ]
}
3418.0
859.0

**Step 1: Extract Reported Transactions from Source**

Extracted transactions:

| date       | amount | currency | from.name | from.account_number | from.bank | to.name | to.account_number | to.bank |
|------------|--------|----------|-----------|---------------------|-----------|---------|------------------|----------|
| 2025-04-19 | 30000  | HKD      | CHEUNG TAK SHING | 222222222101    | HSBC      | CHAN TAI MAN | 333333333101 | HASE     |

**Step 2: Match Each Reported Transaction to CSV**

Matched transaction:

| date       | amount | currency | from.name | from.account_number | from.bank | to.name | to.account_number | to.bank | channel | can_be_located | transaction_references |
|------------|--------|----------|-----------|---------------------|-----------|---------|------------------|----------|----------|------------------|-----------------------|
| 2025-04-19 | 30000  | HKD      | CHEUNG TAK SHING | 222222222101    | HSBC      | CHAN TAI MAN | 333333333101 | HASE     | CUTF      | true              | 125eef90-cb29-4065-941f-df28b88a75a2 |

**Step 3: Merge Data for Each Matched Transaction**

Merged transaction:

| date       | amount | currency | from.name | from.account_number | from.bank | to.name | to.account_number | to.bank | channel | can_be_located | transaction_references |
|------------|--------|----------|-----------|---------------------|-----------|---------|------------------|----------|----------|------------------|-----------------------|
| 2025-04-19 | 30000  | HKD      | CHEUNG TAK SHING | 222222222101    | HSBC      | CHAN TAI MAN | 333333333101 | HASE     | CUTF      | true              | 125eef90-cb29-4065-941f-df28b88a75a2 |

**Step 4: Apply Transaction Rules**

Applied transaction rules:

| date       | amount | currency | from.name | from.account_number | from.bank | to.name | to.account_number | to.bank | channel | can_be_located | transaction_references |
|------------|--------|----------|-----------|---------------------|-----------|---------|------------------|----------|----------|------------------|-----------------------|
| 2025-04-19 | 30000  | HKD      | CHEUNG TAK SHING | 222222222101    | HSBC      | CHAN TAI MAN | 333333333101 | HASE     | ATM      | true              | 125eef90-cb29-4065-941f-df28b88a75a2 |

**Step 5: Build Final JSON**

Final JSON:

```json
{
  "fraud_type": "AP- Impersonation (others)",
  "alerted_transactions": [
    {
      "date": "2025-04-19",
      "amount": 30000,
      "currency": "HKD",
      "from": {
        "name": "CHEUNG TAK SHING",
        "account_number": "222222222101",
        "bank": "HSBC"
      },
      "to": {
        "name": "CHAN TAI MAN",
        "account_number": "333333333101",
        "bank": "HASE"
      },
      "channel": "ATM",
      "can_be_located": true,
      "transaction_references": [
        "125eef90-cb29-4065-941f-df28b88a75a2"
      ]
    }
  ]
}
2744.0
809.0

**Step 1: Extract Reported Transactions from Source**

Extracted transactions:

| Date | Amount | Currency |
| --- | --- | --- |
| 2025-04-01 | 200000 | HKD |

**Step 2: Match Each Reported Transaction to CSV**

Matched transaction:

| Date | Amount | Currency | Transaction ID |
| --- | --- | --- | --- |
| 2025-04-01 | 200000 | HKD | 01bd7599-6f93-4047-9783-6afe9f0dc772 |

**Step 3: Merge Data for Each Matched Transaction**

Merged transaction:

| Date | Amount | Currency | from | to | channel | can_be_located | transaction_references |
| --- | --- | --- | --- | --- | --- | --- | --- |
| 2025-04-01 | 200000 | HKD | { "name": "TSANG SIU MING", "account_number": "66666666602", "bank": "Bank of China (Hong Kong) Limited" } | { "name": "CHUNG SIU", "account_number": "111-111111-102", "bank": "HASE" } | FPS | true | [ "01bd7599-6f93-4047-9783-6afe9f0dc772" ] |

**Step 4: Apply Transaction Rules**

Adjusted transaction:

| Date | Amount | Currency | from | to | channel | can_be_located | transaction_references |
| --- | --- | --- | --- | --- | --- | --- | --- |
| 2025-04-01 | 200000 | HKD | { "name": "TSANG SIU MING", "account_number": "66666666602", "bank": "Bank of China (Hong Kong) Limited" } | { "name": "CHUNG SIU", "account_number": "111-111111-102", "bank": "HASE" } | FPS | true | [ "01bd7599-6f93-4047-9783-6afe9f0dc772" ] |

**Step 5: Apply Global Field Rules**

Global fields:

| fraud_type | police_reference | police_team |
| --- | --- | --- |
| Investment Fraud - Stock | ESPS 4■■■■■■■ and CDIST 25■■■■■■ (DIT3-■■■■■) | DIT3-■■■■■ |

**Step 6: Build Final JSON**

Final JSON:

```
{
  "fraud_type": "Investment Fraud - Stock",
  "police_reference": "ESPS 4■■■■■■■ and CDIST 25■■■■■■ (DIT3-■■■■■)",
  "police_team": "DIT3-■■■■■",
  "alerted_transactions": [
    {
      "date": "2025-04-01",
      "amount": 200000,
      "currency": "HKD",
      "from": {
        "name": "TSANG SIU MING",
        "account_number": "66666666602",
        "bank": "Bank of China (Hong Kong) Limited"
      },
      "to": {
        "name": "CHUNG SIU",
        "account_number": "111-111111-102",
        "bank": "HASE"
      },
      "channel": "FPS",
      "can_be_located": true,
      "transaction_references": [
        "01bd7599-6f93-4047-9783-6afe9f0dc772"
      ]
    }
  ]
}
3393.0
774.0

**Step 1: Extract Reported Transactions from Source**

Extracted transactions:

| Date       | Amount | Transferor's Bank and Account |
|------------|--------|------------------------------|
| 2025-03-06 | 1200   | Alipay HK Peter Xie          |

**Step 2: Match Each Reported Transaction to CSV**

Matched transaction:

| Date       | Amount | Transferor's Bank and Account | Transaction ID |
|------------|--------|------------------------------|----------------|
| 2025-03-06 | 1200   | Alipay HK Peter Xie          | a9b89f6a-c489-4114-b76f-0e0545ec0898 |

**Step 3: Merge Data for Each Matched Transaction**

Merged transaction:

| date       | amount | currency | from.name | from.account_number | to.name | to.account_number | to.bank | channel | can_be_located | transaction_references |
|------------|--------|----------|-----------|--------------------|---------|------------------|---------|---------|-----------------|----------------------|
| 2025-03-06 | 1200   | HKD      | XIE PANGAN | 66666666603       | CHIU YAN | 111111111103     | HASE    | CWTF    | true            | a9b89f6a-c489-4114-b76f-0e0545ec0898 |

**Step 4: Apply Transaction Rules**

Adjusted transaction:

| date       | amount | currency | from.name | from.account_number | to.name | to.account_number | to.bank | channel | can_be_located | transaction_references |
|------------|--------|----------|-----------|--------------------|---------|------------------|---------|---------|-----------------|----------------------|
| 2025-03-06 | 1200   | HKD      | XIE PANGAN | 66666666603       | CHIU YAN | 111111111103     | HASE    | CWTF    | true            | a9b89f6a-c489-4114-b76f-0e0545ec0898 |

**Step 5: Apply Global Field Rules**

Global fields:

| fraud_type | police_reference | police_team       |
|------------|-----------------|------------------|
| Employment  | POLICEREF2       | District Investigation Team 10, Yuen Long District |

**Step 6: Build Final JSON**

Final JSON:

```json
{
  "fraud_type": "Employment",
  "police_reference": "POLICEREF2",
  "police_team": "District Investigation Team 10, Yuen Long District",
  "alerted_transactions": [
    {
      "date": "2025-03-06",
      "amount": 1200,
      "currency": "HKD",
      "from": {
        "name": "XIE PANGAN",
        "account_number": "66666666603",
        "bank": "Alipay Financial Services (HK) Limited"
      },
      "to": {
        "name": "CHIU YAN",
        "account_number": "111111111103",
        "bank": "HASE"
      },
      "channel": "CWTF",
      "can_be_located": true,
      "transaction_references": [
        "a9b89f6a-c489-4114-b76f-0e0545ec0898"
      ]
    }
  ]
}
3924.0
733.0

**Step 1: Extract Reported Transactions from Source**

Extracted transactions:

| Date       | Amount | Transferor's Bank and Account |
|------------|--------|------------------------------|
| 2025-03-07 | 1000   | Cash Nil                     |
| 2025-01-20 | 1000   | Cash Nil                     |

**Step 2: Match Each Reported Transaction to CSV**

For each transaction extracted in Step 1:

- 2025-03-07 1000: 
  - Exact match found: 
    - Transaction ID: 6dfb619d-8d5d-4223-867c-d39d9d5cdfdd
    - Can_be_located: true
    - Transaction_references: [6dfb619d-8d5d-4223-867c-d39d9d5cdfdd]
- 2025-01-20 1000: 
  - Exact match found: 
    - Transaction ID: ffa353a0-e1e3-473a-9241-944a2cbe8824
    - Can_be_located: true
    - Transaction_references: [ffa353a0-e1e3-473a-9241-944a2cbe8824]

**Step 3: Merge Data for Each Matched Transaction**

- 2025-03-07 1000:
  - Transaction_references: [6dfb619d-8d5d-4223-867c-d39d9d5cdfdd]
  - from: 
    - name: LUI SAN SAN
    - account_number: 66666666605
    - bank: Livi Bank Limited
  - to: 
    - name: CHIU YAN
    - account_number: 111111111103
    - bank: HASE
  - channel: FPS
- 2025-01-20 1000:
  - Transaction_references: [ffa353a0-e1e3-473a-9241-944a2cbe8824]
  - from: 
    - name: CHONG MAN
    - account_number: null
    - bank: null
  - to: 
    - name: CHONG MAN
    - account_number: 111111111104
    - bank: HASE
  - channel: cash

**Step 4: Apply Transaction Rules**

- 2025-03-07 1000:
  - from: 
    - name: LUI SAN SAN
    - account_number: 66666666605
    - bank: Livi Bank Limited
  - to: 
    - name: CHIU YAN
    - account_number: 111111111103
    - bank: HASE
  - channel: FPS
- 2025-01-20 1000:
  - from: 
    - name: CHONG MAN
    - account_number: null
    - bank: null
  - to: 
    - name: CHONG MAN
    - account_number: 111111111104
    - bank: HASE
  - channel: cash

**Step 5: Apply Global Field Rules**

- fraud_type: Telephone Deception
- police_reference: POLICEREF3
- police_team: District Investigation Team 1, Eastern District, North Point Police Station
4418.0
716.0

**Step 1: Extract Reported Transactions from Source**
No transactions are explicitly mentioned in the fraud alert source. Proceed to Step 2.

**Step 2: Match Each Reported Transaction to CSV**
No transactions to match.

**Step 3: Merge Data for Each Matched Transaction**
No transactions to merge.

**Step 4: Apply Transaction Rules**
No transactions to apply rules to.

**Step 5: Apply Global Field Rules**
- fraud_type: "Dealing with property known or believed to represent proceeds of indictable offence"
- police_reference: "POLICEREF4"
- writ_no: "9■■"
- contact_person: "PC ■■■■■"
- police_team: "Regional Crime Support Centre New Territories South, Hong Kong Police Force"

**Step 6: Build Final JSON**
```json
{
  "fraud_type": "Dealing with property known or believed to represent proceeds of indictable offence",
  "police_reference": "POLICEREF4",
  "writ_no": "9■■",
  "contact_person": "PC ■■■■■",
  "police_team": "Regional Crime Support Centre New Territories South, Hong Kong Police Force",
  "alerted_transactions": []
}
3577.0
254.0